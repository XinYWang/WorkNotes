virtual public, diamond inheritance
  class X{ }；
  class Y： public virtual X{ }；
  class Z： public virtual X{ }；
  class A ：public Y， public Z{ }；
 
repo forall .vc "git clean -df"
 
git diff > xxx.patch
git apply xxx.patch
 
std::copy(InputIterator first, InputIterator last, OutputIterator result)
  int myints[]={10,20,30,40,50,60,70};
  std::vector<int> myvector (7);
  std::copy ( myints, myints+7, myvector.begin() );
std::copy_n(InputIt first, Size count, OutputIt result)
std::next() returns an iterator pointing to the element after being advanced by certain no. of positions.
  vector<int>::iterator i1, i2; 
  i2 = std::next(i1, 4); 
  std::copy(i1, i2, std::back_inserter(v2));
