singleton pattern:
  It means that it is only possible to create one instance within the application and it is accessible by getting a
  reference to it using a static method.
  
Lazy-man Mode (Thread-Safe):
  template <typename T>
  class Singleton {
  public:
    static T& GetInstance() {
     if (m_pInstance == NULL) {
        Lock lock;
        if (m_pInstance == NULL) {  
          m_pInstance = new T();
          atexit(Destroy);
        }
        return *m_pInstance;
      }
      return *m_pInstance;
    }

  protected:
    Singleton(void) {}
    ~Singleton(void) {}

  private:
    Singleton(const Singleton& rhs) {}
    Singleton& operator=(const Singleton& rhs) {}

    void Destroy() {
      if (m_pInstance != NULL)
        delete m_pInstance;
      m_pInstance = NULL;
    }
    static T* volatile m_pInstance;
  };

  template <typename T>
  T* Singleton::m_pInstance = NULL;
*************************************************
Hungry-man Mode:
  template <class T>
  class singleton {

  protected:
    singleton(){};
  private:
    singleton(const singleton&){};
    singleton& operator=(const singleton&){};
    static T* m_instance;
  public:
    static T* GetInstance();
  };

template <class T>
T* singleton<T>::GetInstance() {
    return m_instance;
}

template <class T>
T* singleton<T>::m_instance = new T();
****************************************************
Dependency injection: a design pattern used to eliminate direct dependencies to internal and external interfaces.
  Instead of a direct import of these interfaces, the module declares an interface which shall be implemented outside
  the module and injected to it during initialization. 
